openapi: 3.0.3
info:
  description: |
    Esta é a documentação dos webservices da loja Lua Minguante. Visite nosso site em [https://luaminguante.store](https://luaminguante.store) ou nas nossas redes sociais [Instagram](https://www.instagram.com/luaminguanteloja/)
  version: "1.0.0"
  title: Swagger Lua Minguante
  contact:
    email: rafael.servelo@gmail.com
servers:
  - description: Server Lua Minguante
    url: https://luaminguante.store/server
security:
  - auth: []
tags:
  - name: auth
    description: API de autenticação.
paths:
  /auth:
    get:
      tags:
        - auth
      summary: Public Route
      description: Verifica se o servidor está rodando.
      responses:
        "200":
          description: "The server is running!"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        "404":
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        "429":
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        default:
          description: Default
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"

  /auth/{userID}:
    get:
      tags:
        - auth
      summary: Private Route
      description: Verifica e retorna os dados do usuário pela ID.
      responses:
        "200":
          description: "Json com os dados do usuário."

        "404":
          description: "Usuário não encontrado!"

        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        "429":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        default:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
      parameters:
        - name: userID
          in: path
          description: ID do usuario para retornar
          required: true
          schema:
            type: string
            format: string
      security:
        - auth: []
  /auth/register:
    post:
      tags:
        - auth
      summary: Register User
      description: "Registra o usuário no banco de dados"
      responses:
        "201":
          description: "Usuário criado com sucesso!"
        "422":
          description: Retorna a descrição do que está faltando na requisição.
          content:
            application/json:
              schema:
                default:
                  {
                    "422":
                      [
                        "O nome é obrigatório!",
                        "O email é obrigatório!",
                        "O cpf é obrigatório!",
                        "O número de telefone é obrigatório!",
                        "Necessário informar o endereço!",
                        "A senha deve conter no mínimo 8 caracteres!",
                        "As senhas não conferem!",
                        "Este usuário ja existe no sistema!",
                      ],
                  }

      requestBody:
        $ref: "#/components/requestBodies/RegisterUser"
  /auth/login:
    post:
      tags:
        - auth
      summary: "Login"
      description: "API para o usuário entrar no sistema"
      responses:
        "200":
          description: "Autenticação realizada com sucesso!"
        "404":
          description: "Usuário não encontrado!"
        "422":
          description: "Retorna a descrição do que está faltando na requisição."
      requestBody:
        $ref: "#/components/requestBodies/Login"
  /auth/forgot_password:
    post:
      tags:
        - auth
      summary: "Forgot Password"
      description: "API para o usuário entrar no sistema"
      responses:
        "200":
          description: "Email enviado com sucesso!"
        "400":
          description: "Não é possível enviar e-mail com senha esquecida!"
        "404":
          description: "Usuário não encontrado!"
      requestBody:
        $ref: "#/components/requestBodies/ForgotPassword"
components:
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        cpf:
          type: string
        phone:
          type: string
        idAdm:
          type: boolean
        address:
          $ref: "#/components/schemas/Address"
    AddressObject:
      type: object
      properties:
        cep:
          type: string
        street:
          type: string
        number:
          type: string
        neighborhood:
          type: string
        complement:
          type: string
        city:
          type: string
        state:
          type: string
    Address:
      type: array
      items:
        $ref: "#/components/schemas/AddressObject"
      maxItems: 100
    LoginBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    response:
      type: object
      properties:
        msg:
          type: string
  requestBodies:
    RegisterUser:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterUser"
      description: |
        Objeto de registro necessário para o cadastro do usuário no banco de dados.
      required: true
    Login:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginBody"
      required: true
    ForgotPassword:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
      required: true
  securitySchemes:
    auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
