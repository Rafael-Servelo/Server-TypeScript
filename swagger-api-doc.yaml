openapi: 3.0.0
info:
  description: |
    Esta é a documentação dos webservices da loja Lua Minguante. Visite nosso site em [https://luaminguante.store](https://luaminguante.store) ou nas nossas redes sociais [Instagram](https://www.instagram.com/luaminguanteloja/)
  version: "1.0.0"
  title: Swagger Lua Minguante
  contact:
    email: rafael.servelo@gmail.com
servers:
  - description: Server Lua Minguante
    url: https://luaminguante.store/server
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: auth
    description: API de autenticação.
paths:
  /auth:
    get:
      tags: 
        - auth
      summary: Public Route
      operationId: publicRoute
      description: Verifica se o servidor está rodando.
      responses:
        "200":
          description: "The server is running!"
  /auth/{userID}:
    get:
      tags:
        - auth
      summary: Private Route
      operationId: privateRoute
      description: Verifica e retorna os dados do usuário pela ID.
      responses:
        "200":
          description: "Json com os dados do usuário."
        "404":
          description: "Usuário não encontrado!"
      parameters:
        - name: userID
          in: path
          description: ID do usuario para retornar
          required: true
          schema:
            type: string
            format: string
      security: 
      - auth: []
  /auth/register:
    post:
      tags:
        - auth
      summary: Register User
      description: "Registra o usuário no banco de dados"
      responses:
        "201":
          description: "Usuário criado com sucesso!"
        "422":
          description: 
            Retorna a descrição do que está faltando na requisição.
          
      requestBody:
        $ref: '#/components/requestBodies/RegisterUser'
  /auth/login:
    post:
      tags:
       - auth
      summary: "Login"
      description: "API para o usuário entrar no sistema"
      responses:
        "200":
          description: "Autenticação realizada com sucesso!"
        "404":
          description: "Usuário não encontrado!"
        "422":
          description: "Retorna a descrição do que está faltando na requisição."
      requestBody:
        $ref: '#/components/requestBodies/Login'
  /auth/forgot_password:
    post:
      tags:
       - auth
      summary: "Forgot Password"
      description: "API para o usuário entrar no sistema"
      responses:
        "200":
          description: "Email enviado com sucesso!"
        "400":
          description: "Não é possível enviar e-mail com senha esquecida!"
        "404":
          description: "Usuário não encontrado!"
      requestBody:
        $ref: '#/components/requestBodies/ForgotPassword'
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      operationId: addPet
      responses:
        '405':
          description: Invalid input
      requestBody:
        $ref: '#/components/requestBodies/Pet'
    put:
      tags:
        - pet
      summary: Update an existing pet
      operationId: updatePet
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      requestBody:
        $ref: '#/components/requestBodies/Pet'
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - available
                - pending
                - sold
              default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Muliple tags can be provided with comma separated strings. Use\ \ tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: true
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      deprecated: true
  '/pet/{petId}':
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '405':
          description: Invalid input
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
    delete:
      tags:
        - pet
      summary: Deletes a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
  '/pet/{petId}/uploadImage':
    post:
      tags:
        - pet
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
components:
  schemas:
    RegisterUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        confirmPassword:
          type: string
        cpf:
          type: string
          example: "12345678910"
        phone:
          type: string
          example: "(11) 91234-5678"
        idAdm:
          type: boolean
        address:
          $ref: '#/components/schemas/Address'
    AddressObject:
      type: object
      properties:
        cep:
          type: string
        street:
          type: string
        number:
          type: string
        neighborhood:
          type: string
        complement:
          type: string
        city:
          type: string
        state:
          type: string
    Address:
      type: array
      items:
        $ref: '#/components/schemas/AddressObject'
    LoginBody:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  requestBodies:
    RegisterUser:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RegisterUser'
      description: "Objeto de registro necessário para o cadastro do usuário no banco de dados."
      required: true
    Login:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoginBody'
    ForgotPassword: 
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  securitySchemes:
    auth:
      type: apiKey
      name: authorization
      in: header